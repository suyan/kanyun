#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright 2012 Sina Corporation
# All Rights Reserved.
# Author: YuWei Peng <pengyuwei@gmail.com>
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import sys
import time
import ConfigParser
import json
import zmq
#from collections import OrderedDict
try:
   from collections import OrderedDict
except ImportError:
   from ordereddict import OrderedDict
from datetime import datetime
from dateutil.parser import parse

from kanyun.client import api_client
from kanyun.common import const


def show_result(rs):
    if rs is None:
        return
    print rs
    rs = rs.setdefault("DATA", None)
    if rs is None or len(rs) == 0:
        return
    for k, i in rs.iteritems():
        print "{%s:%s}" % (k, i)
    print "%d results" % (len(rs))
    print "spend", time.clock(), "seconds"

def show_data(rs, row_id, cf_str, scf_str):
    if rs is None:
        return
    rs = rs.setdefault("DATA", None)
    if rs is None:
        return

    for i in rs:
        print i
    print "%d results of key=%s,cf=%s,scf=%s" % (len(rs), row_id, cf_str, scf_str)
    print "spend", time.clock(), "seconds"

def show_result2(rs, row_id, cf_str, scf_str):
    if rs is None:
        return
    rs = rs.setdefault("DATA", None)
    if rs is None or rs.items is None:
        return
    rs = OrderedDict(sorted(rs.items(), key=lambda t: t[0]))
    for k, i in rs.iteritems():
        timestr = datetime.fromtimestamp(float(k)).isoformat()
        print "%s(%s):%s" % (k, timestr, i)
    print "%d results of key=%s,cf=%s,scf=%s" % (len(rs), row_id, cf_str, scf_str)
    print "spend", time.clock(), "seconds"

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] in ['--help', "-h", "?"]:
            print "usage:"
            print "\tapi_client"
            print "\tapi_client -l <metric>"
            print "\tapi_client -t <timestamp>"
            print "\tapi_client -d <timestring>"
#            print "\tapi_client <id> vmnetwork <IP> <option> <period> " \
#                   "<time_from> <time_to>"
            print "\tapi_client -get <id> <cf> <scf> <time_from> <time_to>"
            print "\tapi_client <id> <cf> <scf> <option> <period> " \
                   "<time_from> <time_to>"
            print "option:"
            print "\t[sum]|[max]|[min]|[avg]|[sam]"
            print "metric:"
            print "\t[vmnetwork]|[cpu]|[mem_max]|[mem_free]|[nic_read]|[blk_read]"
            print "example:"
            print "\tapi-client instance-00000001@pyw.novalocal " \
                   "cpu total sum 5 " \
                   "2012-02-20T12:12:12 2012-06-20T12:12:12"
            return

    config = ConfigParser.ConfigParser()
    if len(config.read("kanyun.conf"))==0:
        config.read("/etc/kanyun.conf")
    cfg = dict(config.items('client'))

    context = zmq.Context()

    apiclient = api_client.ApiClient(cfg['api_host'], cfg['api_port'])
    time.clock()

    if len(sys.argv) == 3:
        if sys.argv[1] == '-l':
            metric = sys.argv[2]
            rs = apiclient.list_instaces(metric=metric)
            show_result(rs)
        elif sys.argv[1] == '-t':
            timestamp = float(sys.argv[2])
            print datetime.fromtimestamp(timestamp).isoformat()
        elif sys.argv[1] == '-d':
            timesstr = sys.argv[2]
            timestamp = parse(timesstr)
            timestamp = int(time.mktime(timestamp.timetuple()))
            print timestamp
        return
    elif len(sys.argv) == 8:
        row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[3]
        statistic, period = sys.argv[4], int(sys.argv[5])
        time_from, time_to = sys.argv[6], sys.argv[7]
        rs = apiclient.query_usage_report({
                                    'method': 'query_usage_report',
                                    'args': {
                                        'id': row_id,
                                        'metric': cf_str,
                                        'metric_param': scf_str,
                                        'statistic': statistic,
                                        'period': period,
                                        'timestamp_from': time_from,
                                        'timestamp_to': time_to,
                                        }
                                    })
        show_result2(rs, row_id=row_id, cf_str=cf_str, scf_str=scf_str)
        return
    elif len(sys.argv) == 7:
        if sys.argv[1] == '-get':
            row_id, cf_str, scf_str = sys.argv[2], sys.argv[3], sys.argv[4]
            time_from, time_to = sys.argv[5], sys.argv[6]
            rs = apiclient.get_data({
                                    'method': 'get_data',
                                    'args': {
                                        'id': row_id,
                                        'metric': cf_str,
                                        'metric_param': scf_str,
                                        'timestamp_from': time_from,
                                        'timestamp_to': time_to,
                                        }
                                    })
            show_data(rs, row_id=row_id, cf_str=cf_str, scf_str=scf_str)
    else:
        rs = apiclient.query_usage_report({
                                        'method': 'query_usage_report',
                                        'args': {
                                            'id': 'instance-00000001@pyw.novalocal',
                                            'metric': 'cpu',
                                            'metric_param': 'total',
                                            'statistic': 'max',
                                            'period': 5,
                                            'timestamp_from': '2012-02-20T12:12:12',
                                            'timestamp_to': '2012-05-22T12:12:12',
                                            }
                                        })
        show_result2(rs, "instance-00000001@pyw.novalocal", "cpu", "total")
        return

if __name__ == '__main__':
    main()
