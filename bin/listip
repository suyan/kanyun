#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright 2012 Sina Corporation
# All Rights Reserved.
# Author: YuWei Peng <pengyuwei@gmail.com>
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import sys
import traceback
import os
import subprocess
import shlex
from nova import context
from nova import db
from nova import flags
from nova import utils

import subprocess

if "check_output" not in dir( subprocess ): # duck punch it in!
    def f(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd)
        return output
    subprocess.check_output = f

def list_instance_ip():
    ret = dict()
    admin_ctxt = context.get_admin_context()
    CMD = "sudo virsh list"
    buf = subprocess.check_output(shlex.split(CMD), stderr=subprocess.STDOUT)
    buf = buf.split('\n')
    buf = buf[2:]
    for i in buf:
        line = i.split()
        if len(line) < 3:
            continue
        instance_no = line[0]
        instance_id = line[1][-6:]
        instance_id = str(int(instance_id, 16))
        if utils.is_uuid_like(instance_id):
            instance_ref = db.instance_get_by_uuid(admin_ctxt, instance_id)
        else:
            instance_ref = db.instance_get(admin_ctxt, instance_id)

        inst_info = dict(instance_ref.iteritems())

        fixed_ips_info = db.fixed_ip_get_by_instance(admin_ctxt, instance_id)
        for info in fixed_ips_info:
            print instance_no, ". ", instance_id, line[1], info['address']
            ret[instance_id] = (line[1], info['address'])
            break
    print len(ret), 'instances.'

    return ret
    
    
def main():
    setup = False # auto setup iptables
    if len(sys.argv) > 1:
        if sys.argv[1] == '-a':
            setup = True
        elif sys.argv[1] == '?' or sys.argv[1] == "--help" or sys.argv[1] == "-h":
            print "Show instance's ip address"
            print 'usage: listip [-a]'
            print '\t[-a] : auto set iptables policy.'
            print
            return

#      iptables -t filter -N nova-compute-f-inst-$instance_id
#      iptables -I FORWARD -s $instance_ip -j nova-compute-f-inst-$instance_id
#      iptables -A nova-compute-f-inst-$instance_id -o $public_interface \
#                     -m comment \
#                     --comment " $instance_id $instance_ip accounting rule "
                     
    cmd1 = """iptables -t filter -N nova-compute-f-inst-%s"""
    cmd2 = """iptables -I FORWARD -s %s -j nova-compute-f-inst-%s"""
    cmd3 = """iptables -A nova-compute-f-inst-%s -o %s -m comment --comment %s %s accounting rule """
#    utils.default_flagfile()
#    try:
#        flags.FLAGS(sys.argv[:2])
#    except:
#        print 'sudo...'
#        return

    ret = list_instance_ip()
    has_error = False
    if setup:
        for k, (n, ip) in ret.iteritems():
            cmd = cmd1 % (k)
            try:
                print cmd
                os.system(cmd)
            except:
                has_error = True
                print cmd
                
            cmd = cmd2 % (ip, k)
            try:
                print cmd
                os.system(cmd)
            except:
                has_error = True
                print cmd
                traceback.print_stack()
                    
            cmd = cmd3 % (k, 'br100', k, ip)
            try:
                print cmd
                os.system(cmd)
            except:
                has_error = True
                print cmd
                traceback.print_stack()
        if has_error: 
            print 'Auto set iptables policy failed.'
        else:
            print "Use 'sudo iptables -n -L' to look the policy."
        
        
if __name__ == '__main__':
    main()
